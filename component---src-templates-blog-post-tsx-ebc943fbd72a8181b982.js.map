{"version":3,"file":"component---src-templates-blog-post-tsx-ebc943fbd72a8181b982.js","mappings":"6IAWA,IATeA,IAAoC,IAAnC,SAAEC,EAAQ,MAAEC,EAAK,SAAEC,GAAUH,EAC3C,MACMI,EAD6B,MAChBH,EAASI,SAE5B,OACEC,EAAAA,cAAA,QAAM,oBAAmBF,EAAYG,UAAU,gCAAgCJ,EAAgB,C,+CCInG,MAAMK,EAAMR,IAA6C,IAADS,EAAAC,EAAAC,EAAA,IAA3C,YAAEC,EAAW,KAAEC,EAAI,MAAEX,EAAK,SAAEC,GAAUH,EACjD,MAAM,KAAEc,IAASC,EAAAA,EAAAA,gBAAe,YAiB1BC,EAAkBJ,GAAeE,EAAKG,aAAaL,YACnDM,EAAgC,QAApBT,EAAGK,EAAKG,oBAAY,IAAAR,OAAA,EAAjBA,EAAmBP,MAExC,OACEI,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,aAAQY,EAAkBhB,EAAK,MAAMgB,EAAiBhB,GACtDI,EAAAA,cAAA,QAAMa,KAAK,cAAcC,QAASJ,IAClCV,EAAAA,cAAA,QAAMe,SAAS,WAAWD,QAASlB,IACnCI,EAAAA,cAAA,QAAMe,SAAS,iBAAiBD,QAASJ,IACzCV,EAAAA,cAAA,QAAMe,SAAS,UAAUD,QAAQ,YACjCd,EAAAA,cAAA,QAAMa,KAAK,eAAeC,QAAQ,YAClCd,EAAAA,cAAA,QACEa,KAAK,kBACLC,SAA0B,QAAjBV,EAAAI,EAAKG,oBAAY,IAAAP,GAAQ,QAARC,EAAjBD,EAAmBY,cAAM,IAAAX,OAAR,EAAjBA,EAA2BY,UAAO,KAE7CjB,EAAAA,cAAA,QAAMa,KAAK,gBAAgBC,QAASlB,IACpCI,EAAAA,cAAA,QAAMa,KAAK,sBAAsBC,QAASJ,IACzCb,EACA,EAIPK,EAAIgB,aAAe,CACjBZ,YAAY,IAQd,K,mGCnDA,MA2Baa,EAAOC,IAAoC,IAAlCC,MAAOC,eAAgBC,IAAMH,EACjD,OACIpB,EAAAA,cAACE,EAAAA,EAAG,CACAN,MAAO2B,EAAKC,YAAY5B,MACxBU,YAAaiB,EAAKC,YAAYlB,aAAeiB,EAAKE,QAAS5B,cAAU6B,EAAWnB,UAAMmB,GAAY,EAI5G,UAnCyBhC,IAAoE,IAAAS,EAAA,IAAlEkB,MAAM,SAACM,EAAQ,KAAEC,EAAI,KAAEpB,EAAMc,eAAgBC,GAAK,SAAE5B,GAASD,EACtF,MAAMmC,GAA6B,QAAjB1B,EAAAK,EAAKG,oBAAY,IAAAR,OAAA,EAAjBA,EAAmBP,QAAK,QAE1C,OACII,EAAAA,cAAC8B,EAAAA,EAAM,CAACnC,SAAUA,EAAUC,MAAOiC,GACjC7B,EAAAA,cAAA,WACI+B,WAAS,EACTC,SAAS,8BAEXhC,EAAAA,cAAA,UAAQC,UAAU,QAChBD,EAAAA,cAAA,MAAIC,UAAU,wBACXsB,EAAKC,YAAY5B,OAEpBI,EAAAA,cAAA,KAAGC,UAAU,yBAAyBsB,EAAKC,YAAYS,SAAS,MAAIV,EAAKC,YAAYU,OAEvFlC,EAAAA,cAAA,WACEA,EAAAA,cAAA,WACIC,UAAW,kBACXkC,wBAAyB,CAACC,OAAQb,EAAKc,MACvCC,SAAS,kBAIV,C","sources":["webpack://gatsby-starter-blog/./src/components/layout/layout.tsx","webpack://gatsby-starter-blog/./src/components/seo.tsx","webpack://gatsby-starter-blog/./src/templates/blog-post.tsx"],"sourcesContent":["import * as React from \"react\";\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`;\n  const isRootPath = location.pathname === rootPath;\n\n  return (\n    <main data-is-root-path={isRootPath} className=\"max-w-screen-md px-6 mx-auto\">{children}</main>\n  );\n};\n\nexport default Layout;\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\";\nimport * as PropTypes from \"prop-types\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\nconst Seo = ({ description, lang, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n        query {\n            site {\n                siteMetadata {\n                    title\n                    description\n                    email\n                    social {\n                        twitter\n                    }\n                }\n            }\n        }\n    `\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n  const defaultTitle = site.siteMetadata?.title;\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  );\n};\n\nSeo.defaultProps = {\n  description: ``\n};\n\nSeo.propTypes = {\n  description: PropTypes.string,\n  title: PropTypes.string.isRequired\n};\n\nexport default Seo;\n","import * as React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"@/src/components/layout/layout\";\nimport Seo from \"@/src/components/seo\";\nimport \"prismjs/themes/prism-okaidia.min.css\";\nimport {cn} from \"@nextui-org/react\";\n\n\n\nconst BlogPostTemplate = ({data: {previous, next, site, markdownRemark: post}, location}) => {\n  const siteTitle = site.siteMetadata?.title || `Title`;\n\n  return (\n      <Layout location={location} title={siteTitle}>\n        <article\n            itemScope\n            itemType=\"https://schema.org/Article\"\n        >\n          <header className=\"py-8\">\n            <h1 className=\"text-3xl font-medium\">\n              {post.frontmatter.title}\n            </h1>\n            <p className=\"mt-2 text-default-400\">{post.frontmatter.category} | {post.frontmatter.date}</p>\n          </header>\n          <div>\n            <section\n                className={'article-content'}\n                dangerouslySetInnerHTML={{__html: post.html}}\n                itemProp=\"articleBody\"\n            />\n          </div>\n        </article>\n      </Layout>\n  );\n};\n\nexport const Head = ({data: {markdownRemark: post}}) => {\n  return (\n      <Seo\n          title={post.frontmatter.title}\n          description={post.frontmatter.description || post.excerpt} children={undefined} lang={undefined}/>\n  );\n};\n\nexport default BlogPostTemplate;\n\nexport const pageQuery = graphql`\n    query BlogPostBySlug(\n        $id: String!\n        $previousPostId: String\n        $nextPostId: String\n    ) {\n        site {\n            siteMetadata {\n                title\n            }\n        }\n        markdownRemark(id: { eq: $id }) {\n            id\n            excerpt(pruneLength: 160)\n            html\n            frontmatter {\n                title\n                date(formatString: \"YYYY년 MM월 DD일\")\n                description\n                category\n            }\n        }\n        previous: markdownRemark(id: { eq: $previousPostId }) {\n            fields {\n                slug\n            }\n            frontmatter {\n                title\n            }\n        }\n        next: markdownRemark(id: { eq: $nextPostId }) {\n            fields {\n                slug\n            }\n            frontmatter {\n                title\n            }\n        }\n    }\n`;\n"],"names":["_ref","location","title","children","isRootPath","pathname","React","className","Seo","_site$siteMetadata","_site$siteMetadata2","_site$siteMetadata2$s","description","lang","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","name","content","property","social","twitter","defaultProps","Head","_ref2","data","markdownRemark","post","frontmatter","excerpt","undefined","previous","next","siteTitle","Layout","itemScope","itemType","category","date","dangerouslySetInnerHTML","__html","html","itemProp"],"sourceRoot":""}